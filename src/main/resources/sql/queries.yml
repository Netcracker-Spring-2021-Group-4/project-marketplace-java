custom:
  postgres:
    user:
      get-by-email: >
        SELECT user_id, email, password, first_name, last_name, phone_number, status_name, role_name
        FROM auth_user INNER JOIN user_status USING (status_id) INNER JOIN user_role USING (role_id)
        WHERE email = ?;
      get-authorities: >
        SELECT role_name AS authority
        FROM user_role
        WHERE role_id = ?
        UNION ALL
        SELECT permission_name AS authority
        FROM user_permission INNER JOIN permission_role USING(permission_id)
        WHERE role_id = ?;
      create-new: >
        INSERT INTO auth_user (email, password, first_name, last_name, phone_number, role_id, status_id) VALUES (?, ?, ?, ?, ?, ?, ?);
      find-user-by-id: >
        SELECT email, password, first_name, last_name, phone_number, status_name, role_name
        FROM auth_user INNER JOIN user_status USING (status_id) INNER JOIN user_role USING (role_id)
        WHERE user_id = ?
      get-permissions: >
        SELECT permission_name
        FROM user_permission INNER JOIN permission_role USING(permission_id)
        WHERE role_id = ?;
      update-status: >
        UPDATE auth_user
        SET status_id=(SELECT status_id FROM user_status WHERE status_name=?)
        WHERE email=?;
      update-user-info: >
        UPDATE auth_user
        SET first_name=?, last_name=?, phone_number=?
        WHERE email=?;
      update-password: >
        UPDATE auth_user
        SET password=?
        WHERE email=?;
      find-status-id-by-name: >
        SELECT status_id FROM user_status WHERE status_name=?;
      find-role-id-by-name: >
        SELECT role_id FROM user_role WHERE role_name=?;
      find-by-role-status-names: >
        SELECT user_id, email, first_name, last_name, phone_number, status_name, role_name
        FROM auth_user INNER JOIN user_role USING (role_id) INNER JOIN user_status USING (status_id)
        WHERE role_name IN (:roles) AND status_name IN (:statuses)
        AND first_name LIKE (:fst_seq) AND last_name LIKE (:last_seq)
        LIMIT (:limit) OFFSET (:offset);
      count-by-role-status-names: >
        SELECT COUNT(*) AS num_found
        FROM auth_user INNER JOIN user_role USING (role_id) INNER JOIN user_status USING (status_id)
        WHERE role_name IN (:roles) AND status_name IN (:statuses)
        AND first_name LIKE (:fst_seq) AND last_name LIKE (:last_seq);
    token:
      create-token: >
        INSERT INTO confirmation_token (token, user_email, expired_at) VALUES (?, ?, ?);
      read-token: >
        SELECT token, user_email, expired_at, is_activated FROM confirmation_token WHERE token=?
      activate-token: >
        UPDATE confirmation_token
        SET is_activated = true
        WHERE token = ?;
