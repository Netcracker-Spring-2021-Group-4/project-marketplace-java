custom:
  postgres:
    advisory-lock:
      capture-transactional: >
        SELECT pg_advisory_xact_lock(?);
    #      capture-sessional: >
    #        SELECT pg_advisory_lock(?);
    #      release-sessional: >
    #        SELECT pg_advisory_unlock(?);
    user:
      get-by-email: >
        SELECT user_id, email, password, first_name, last_name, phone_number, status_name, role_name
        FROM auth_user INNER JOIN user_status USING (status_id) INNER JOIN user_role USING (role_id)
        WHERE email = ?;
      get-authorities: >
        SELECT role_name AS authority
        FROM user_role
        WHERE role_id = ?
        UNION ALL
        SELECT permission_name AS authority
        FROM user_permission INNER JOIN permission_role USING(permission_id)
        WHERE role_id = ?;
      create-new: >
        INSERT INTO auth_user (email, password, first_name, last_name, phone_number, role_id, status_id) VALUES (?, ?, ?, ?, ?, ?, ?);
      find-user-by-id: >
        SELECT email, password, first_name, last_name, phone_number, status_name, role_name
        FROM auth_user INNER JOIN user_status USING (status_id) INNER JOIN user_role USING (role_id)
        WHERE user_id = ?
      get-permissions: >
        SELECT permission_name
        FROM user_permission INNER JOIN permission_role USING(permission_id)
        WHERE role_id = ?;
      update-status: >
        UPDATE auth_user
        SET status_id=(SELECT status_id FROM user_status WHERE status_name=?)
        WHERE email=?;
      update-user-info: >
        UPDATE auth_user
        SET first_name=?, last_name=?, phone_number=?
        WHERE email=?;
      update-password: >
        UPDATE auth_user
        SET password=?
        WHERE email=?;
      find-status-id-by-name: >
        SELECT status_id FROM user_status WHERE status_name=?;
      find-role-id-by-name: >
        SELECT role_id FROM user_role WHERE role_name=?;
      find-by-role-status-names: >
        SELECT user_id, email, first_name, last_name, phone_number, status_name, role_name
        FROM auth_user INNER JOIN user_role USING (role_id) INNER JOIN user_status USING (status_id)
        WHERE role_name IN (:roles) AND status_name IN (:statuses)
        AND first_name LIKE (:fst_seq) AND last_name LIKE (:last_seq)
        LIMIT (:limit) OFFSET (:offset);
      count-by-role-status-names: >
        SELECT COUNT(*) AS num_found
        FROM auth_user INNER JOIN user_role USING (role_id) INNER JOIN user_status USING (status_id)
        WHERE role_name IN (:roles) AND status_name IN (:statuses)
        AND first_name LIKE (:fst_seq) AND last_name LIKE (:last_seq);

    product:
      create-product: >
        INSERT INTO product (product_id, product_name, image_url, description, price, in_stock, reserved, availability_date,
        is_active,category_id) VALUES (?,?, ?, ?, ?, ?, ?, ?,?,?);
      find-product-by-id: >
        SELECT product_id,product_name, image_url,description,price::money::numeric::float8,in_stock,reserved,availability_date,is_active,category_id FROM product WHERE product_id = ?
      find-in-stock-by-id: >
        SELECT in_stock FROM product WHERE product_id = ?
      update-product-info: >
        UPDATE product
        SET product_name = ?, description = ?, price = ?, in_stock = ?, reserved = ?,
        category_id = ?
        WHERE product_id = ?;
      update-product-picture: >
        UPDATE product
        SET image_url = ?
        WHERE product_id = ?;
      active-products-size: >
        SELECT COUNT(product_id)
        FROM product
        WHERE is_active=true
      active-products-filtered-size: >
        SELECT COUNT(product.product_id)
              FROM product LEFT OUTER JOIN discount ON product.product_id = discount.product_id
              WHERE is_active=true
              AND ((
              offered_price IS NULL
              AND price>=(:minPrice) AND price<=(:maxPrice)
              )
              OR ( starts_at<now() AND ends_at>now()
              AND offered_price >= (:minPrice) AND offered_price<=(:maxPrice))
              )
              AND product_name LIKE (:name_query)
              AND category_id IN (:category_ids);
      max-price: >
        SELECT MAX(price)
        FROM product
        WHERE is_active=true;
      products-page: >
         SELECT product.product_id,product_name, image_url,description,price,in_stock,category_id,offered_price
               FROM product LEFT OUTER JOIN discount ON product.product_id = discount.product_id
               WHERE is_active=true
               AND ((offered_price IS NULL)
               OR ( starts_at<now() AND ends_at>now()))
               LIMIT (:limit) OFFSET (:offset);

      products-with-filters-order-by-price-asc: >
          SELECT product.product_id,product_name, image_url,description,price,in_stock,category_id,offered_price,
          CASE
          WHEN offered_price IS NULL THEN price
          ELSE offered_price
          END as newPrice
          FROM product LEFT OUTER JOIN discount ON product.product_id = discount.product_id
          WHERE is_active=true
          AND ((
          offered_price IS NULL
          AND price>=(:minPrice) AND price<=(:maxPrice)
          )
          OR ( starts_at<now() AND ends_at>now()
          AND offered_price >= (:minPrice) AND offered_price<=(:maxPrice))

          )
          AND product_name LIKE (:name_query)
          AND category_id IN (:category_ids)
          ORDER BY newPrice ASC
          LIMIT (:limit) OFFSET (:offset);



      products-with-filters-order-by-price-desc: >
        SELECT product.product_id,product_name, image_url,description,price,in_stock,category_id,offered_price,
               CASE
                   WHEN offered_price IS NULL THEN price
                   ELSE offered_price
               END as newPrice
        FROM product LEFT OUTER JOIN discount ON product.product_id = discount.product_id
        WHERE is_active=true
          AND ((
                       offered_price IS NULL
                       AND price>=(:minPrice) AND price<=(:maxPrice)
                   )
            OR ( starts_at<now() AND ends_at>now()
                AND offered_price >= (:minPrice) AND offered_price<=(:maxPrice))

            )
          AND product_name LIKE (:name_query)
          AND category_id IN (:category_ids)
        ORDER BY newPrice DESC
        LIMIT (:limit) OFFSET (:offset);



      products-with-filters-order-by-name: >
        SELECT product.product_id,product_name, image_url,description,price,in_stock,
        category_id,offered_price
                  FROM product LEFT OUTER JOIN discount ON product.product_id = discount.product_id
                  WHERE is_active=true
                  AND ((
        			  offered_price IS NULL
        			  AND price>=(:minPrice) AND price<=(:maxPrice)
        			  )
        				  OR ( starts_at<now() AND ends_at>now()
        						AND offered_price >= (:minPrice) AND offered_price<=(:maxPrice))

        				  )
        		  AND product_name LIKE (:name_query)
        		  AND category_id IN (:category_ids)
                  ORDER BY product_name
        		  LIMIT (:limit) OFFSET (:offset);



      products-with-filters-order-by-date: >
        SELECT product.product_id,product_name, image_url,description,price,in_stock,
                  category_id,offered_price
                  FROM product LEFT OUTER JOIN discount ON product.product_id = discount.product_id
                  WHERE is_active=true
                  AND ((
        			  offered_price IS NULL
        			  AND price>=(:minPrice) AND price<=(:maxPrice)
        			  )
        				  OR ( starts_at<now() AND ends_at>now()
        						AND offered_price >= (:minPrice) AND offered_price<=(:maxPrice))

        				  )
        		  AND product_name LIKE (:name_query)
        		  AND category_id IN (:category_ids)
                  ORDER BY availability_date
        		  LIMIT (:limit) OFFSET (:offset);
      product-for-comparison-by-id: >
        SELECT product_id, product_name, description, image_url, price, category_id
        FROM product
        WHERE product_id = ?



    discount:
      find-active-product-discount: >
        SELECT discount_id, offered_price, starts_at, ends_at
        FROM discount
        WHERE product_id = ? AND NOW() < ends_at AND NOW() > starts_at;
      find-unexpired-discounts: >
        SELECT discount_id, offered_price, starts_at, ends_at
        FROM discount
        WHERE product_id = ? AND NOW() < ends_at;
      check-period: >
        SELECT COUNT(discount_id)
        FROM discount
        WHERE product_id = ? AND starts_at <= ? AND ends_at >= ?;
      check-period-edit: >
        SELECT COUNT(discount_id)
        FROM discount
        WHERE product_id = ? AND discount_id <> ? AND starts_at <= ? AND ends_at >= ?;
      create-discount: >
        INSERT INTO discount (discount_id, offered_price, starts_at, ends_at, product_id) VALUES (?, ?, ?, ?, ?);
      read-discount: >
        SELECT offered_price, starts_at, ends_at, product_id
        WHERE discount_id = ?;
      update-discount: >
        UPDATE discount
        SET offered_price = ?, starts_at = ?, ends_at = ?
        WHERE discount_id = ?;
      delete-discount: >
        DELETE FROM discount
        WHERE discount_id = ?;

    token:
      create-token: >
        INSERT INTO confirmation_token (token, user_email, expired_at) VALUES (?, ?, ?);
      read-token: >
        SELECT token, user_email, expired_at, is_activated FROM confirmation_token WHERE token=?
      activate-token: >
        UPDATE confirmation_token
        SET is_activated = true
        WHERE token = ?;

    auth:
      role:
        find-role-id-by-role-name: >
          SELECT role_id FROM user_role WHERE role_name=?;

    cart:
      add-to-cart: >
        INSERT INTO cart_item(cart_item_id, quantity,timestamp_added,customer_id,product_id)
        VALUES (?,?,?,?,?);
      remove-from-cart: >
        DELETE FROM cart_item
        WHERE cart_item_id = ?;
      get-by-customer-product: >
        SELECT cart_item_id, quantity, timestamp_added, customer_id, product_id
        FROM cart_item
        WHERE customer_id = ? AND product_id = ? ;
      change-quantity-by-id: >
        UPDATE cart_item
        SET quantity = ?
        WHERE cart_item_id = ?;
      find-auth-customer-cart-items: >
        SELECT product_id, quantity
        FROM cart_item
        WHERE customer_id = ?;
      reset-cart: >
        DELETE FROM cart_item
        WHERE customer_id=?;
      reserve-product: >
        CALL add_product_reservation(?, ?, ?);
      cancel-reservation: >
        CALL delete_product_reservation(?, ?, ?);


    delivery-slot:
      create-delivery-slot: >
        INSERT INTO dateslot (dateslot_id, datestamp, timeslot_id, courier_id, order_id) VALUES (?,?,?,?,?);
      read-taken-timeslots: >
        SELECT COUNT(user_id) AS num_taken, time_start
        FROM dateslot INNER JOIN timeslot USING (timeslot_id) INNER JOIN auth_user ON courier_id=user_id
        WHERE datestamp=?
        GROUP BY time_start;
      count-active-couriers: >
        SELECT COUNT(user_id)
        FROM auth_user INNER JOIN user_role USING (role_id) INNER JOIN user_status USING (status_id)
        WHERE role_name='ROLE_COURIER' AND status_name='ACTIVE';
      read-all-timeslots: >
        SELECT timeslot_id, time_start, time_end
        FROM timeslot;
      find-free-courier: >
        SELECT user_id, email, password, first_name, last_name, phone_number
        FROM auth_user
        WHERE role_id IN (SELECT role_id FROM user_role WHERE role_name='ROLE_COURIER')
          AND status_id IN (SELECT status_id FROM user_status WHERE status_name='ACTIVE')
          AND NOT EXISTS (
            SELECT *
            FROM dateslot
            WHERE courier_id=auth_user.user_id AND datestamp=? AND timeslot_id=?
        )
        LIMIT 1;
      find-delivery-slot-by-order-id: >
        SELECT dateslot_id, datestamp, time_start, time_end
        FROM dateslot INNER JOIN timeslot USING (timeslot_id)
        WHERE order_id=?;

    order:
      create-order: >
        INSERT INTO prod_order (order_id, placed_at, phone_number, comment, first_name, last_name, status_id, address_id, customer_id)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
      read-order: >
        SELECT placed_at, phone_number, comment, first_name, last_name, status_id, address_id, customer_id
        FROM prod_order
        WHERE order_id=?;
      read-status-ids: >
        SELECT status_id, status_name
        FROM order_status;
      find-courier-orders: >
        SELECT order_id, placed_at, phone_number, comment, first_name, last_name, status_id, address_id, customer_id
        FROM prod_order INNER JOIN dateslot USING (order_id)
        WHERE courier_id=(:courier_id) AND status_id IN (:prod_status_ids)
        LIMIT (:limit) OFFSET (:offset);
      count-courier-orders-num: >
        SELECT COALESCE(COUNT(order_id), 0) AS temp
        FROM prod_order INNER JOIN dateslot USING (order_id)
        WHERE courier_id=(:courier_id) AND status_id IN (:prod_status_ids);
      find-customer-orders: >
        SELECT order_id, placed_at, phone_number, comment, status_id, address_id, customer_id
        FROM prod_order
        WHERE customer_id=(:customer_id) AND status_id IN (:prod_status_ids)
        LIMIT (:limit) OFFSET (:offset);
      count-customer-orders-num: >
        SELECT COALESCE(COUNT(order_id), 0)
        FROM prod_order
        WHERE customer_id=(:customer_id) AND status_id IN (:prod_status_ids);

    order-item:
      create-order-item: >
        INSERT INTO order_item (order_item_id, quantity, price, order_id, product_id) VALUES (?, ?, ?, ?, ?);
      read-order-item: >
        SELECT quantity, price, order_id, product_id
        FROM order_item
        WHERE order_item_id=?;
      read-items-of-order: >
        SELECT order_item_id, quantity, price, product_id
        FROM order_item
        WHERE order_id=?;

    address:
      create-address: >
        INSERT INTO address (address_id, city, street, building, flat, customer_id) VALUES (?, ?, ?, ?, ?, ?);
      read-address: >
        SELECT city, street, building, flat, customer_id
        FROM address
        WHERE address_id=?;

    category:
      find-by-id: >
        SELECT product_category_name
        FROM product_category
        WHERE category_id = ?;
      categories-with-amount-of-product: >
        SELECT product_category.category_id, product_category_name, count(product_id) as amount_of_products
        FROM product_category left outer join product p on product_category.category_id = p.category_id
        group by product_category.category_id;
      categories-ids: >
        SELECT category_id FROM product_category;
      get-all: >
        SELECT category_id, product_category_name
        FROM product_category;
