custom:
  postgres:
    user:
      get-by-email: >
        SELECT user_id, email, password, first_name, last_name, phone_number, status_name, role_name
        FROM auth_user INNER JOIN user_status USING (status_id) INNER JOIN user_role USING (role_id)
        WHERE email = ?;
      get-authorities: >
        SELECT role_name AS authority
        FROM user_role
        WHERE role_id = ?
        UNION ALL
        SELECT permission_name AS authority
        FROM user_permission INNER JOIN permission_role USING(permission_id)
        WHERE role_id = ?;
      create-new: >
        INSERT INTO auth_user (email, password, first_name, last_name, phone_number, role_id, status_id) VALUES (?, ?, ?, ?, ?, ?, ?);
      find-user-by-id: >
        SELECT email, password, first_name, last_name, phone_number, status_name, role_name
        FROM auth_user INNER JOIN user_status USING (status_id) INNER JOIN user_role USING (role_id)
        WHERE user_id = ?
      get-permissions: >
        SELECT permission_name
        FROM user_permission INNER JOIN permission_role USING(permission_id)
        WHERE role_id = ?;
      update-status: >
        UPDATE auth_user
        SET status_id=(SELECT status_id FROM user_status WHERE status_name=?)
        WHERE email=?;
      update-user-info: >
        UPDATE auth_user
        SET first_name=?, last_name=?, phone_number=?
        WHERE email=?;
      update-password: >
        UPDATE auth_user
        SET password=?
        WHERE email=?;
      find-status-id-by-name: >
        SELECT status_id FROM user_status WHERE status_name=?;
      find-role-id-by-name: >
        SELECT role_id FROM user_role WHERE role_name=?;
      find-by-role-status-names: >
        SELECT user_id, email, first_name, last_name, phone_number, status_name, role_name
        FROM auth_user INNER JOIN user_role USING (role_id) INNER JOIN user_status USING (status_id)
        WHERE role_name IN (:roles) AND status_name IN (:statuses)
        AND first_name LIKE (:fst_seq) AND last_name LIKE (:last_seq)
        LIMIT (:limit) OFFSET (:offset);
      count-by-role-status-names: >
        SELECT COUNT(*) AS num_found
        FROM auth_user INNER JOIN user_role USING (role_id) INNER JOIN user_status USING (status_id)
        WHERE role_name IN (:roles) AND status_name IN (:statuses)
        AND first_name LIKE (:fst_seq) AND last_name LIKE (:last_seq);
    product:
      create-product: >
        INSERT INTO product (product_id, product_name, image_url, description, price, in_stock, reserved, availability_date,
        is_active,category_id) VALUES (?,?, ?, ?, ?, ?, ?, ?,?,?);
      findProductById: >
        SELECT product_id,product_name, image_url,description,price::money::numeric::float8,in_stock,reserved,availability_date,is_active,category_id FROM product WHERE product_id = ?
      findInStockById: >
        SELECT in_stock FROM product WHERE product_id = ?
      update-product-info: >
        UPDATE product
        SET product_name = ?, description = ?, price = ?, in_stock = ?, reserved = ?,
        category_id = ?
        WHERE product_id = ?;
      update-product-picture: >
        UPDATE product
        SET image_url = ?
        WHERE product_id = ?;
      activeProductsWithDiscount: >
          SELECT product.product_id,product_name, image_url,description,price,in_stock,reserved,
          availability_date,category_id,offered_price
          FROM product LEFT OUTER JOIN discount ON product.product_id = discount.product_id
          WHERE is_active=true
          AND ((offered_price IS NULL)
          OR ( starts_at>now() AND ends_at <now()));
      productsPage: >
         SELECT product.product_id,product_name, image_url,description,price,in_stock,reserved,
               availability_date,category_id,offered_price
               FROM product LEFT OUTER JOIN discount ON product.product_id = discount.product_id
               WHERE is_active=true
               AND ((offered_price IS NULL)
               OR ( starts_at>now() AND ends_at <now()))
                LIMIT (:limit) OFFSET (:offset);
      productsWithFilters: >
        SELECT product.product_id,product_name, image_url,description,price,in_stock,reserved,
                  availability_date,category_id,offered_price
                  FROM product LEFT OUTER JOIN discount ON product.product_id = discount.product_id
                  WHERE is_active=true
                  AND ((
        			  offered_price IS NULL
        			  AND price>=(:minPrice) AND price<=(:maxPrice)
        			  )
        				  OR ( starts_at>now() AND ends_at <now()
        						AND offered_price >= (:minPrice) AND offered_price<=(:maxPrice))

        				  )
        		  AND product_name LIKE (:name_query)
        		  AND category_id IN (:category_ids)

        		  ORDER BY (:sortOption)
        		  LIMIT (:limit) OFFSET (:offset);
      categoriesWithAmountOfProduct: >
        SELECT product_category.category_id, product_category_name, count(product_id) as amount_of_products
        FROM product_category left outer join product p on product_category.category_id = p.category_id
        group by product_category.category_id;
      activate-deactivate-product: >
        UPDATE product
        SET is_active = CASE WHEN is_active = true THEN false ELSE true END, availability_date = ?, reserved = ?
        WHERE product_id = ?;

    discount:
      find-active-product-discount: >
        SELECT discount_id, offered_price, starts_at, ends_at
        FROM discount
        WHERE product_id = ? AND NOW() < ends_at AND NOW() > starts_at;
      find-unexpired-discounts: >
        SELECT discount_id, offered_price, starts_at, ends_at
        FROM discount
        WHERE product_id = ? AND NOW() < ends_at;
      check-period: >
        SELECT COUNT(discount_id)
        FROM discount
        WHERE product_id = ? AND starts_at <= ? AND ends_at >= ?;
      check-period-edit: >
        SELECT COUNT(discount_id)
        FROM discount
        WHERE product_id = ? AND discount_id <> ? AND starts_at <= ? AND ends_at >= ?;
      create-discount: >
        INSERT INTO discount (discount_id, offered_price, starts_at, ends_at, product_id) VALUES (?, ?, ?, ?, ?);
      read-discount: >
        SELECT offered_price, starts_at, ends_at, product_id
        WHERE discount_id = ?;
      update-discount: >
        UPDATE discount
        SET offered_price = ?, starts_at = ?, ends_at = ?
        WHERE discount_id = ?;
      delete-discount: >
        DELETE FROM discount
        WHERE discount_id = ?;

    token:
      create-token: >
        INSERT INTO confirmation_token (token, user_email, expired_at) VALUES (?, ?, ?);
      read-token: >
        SELECT token, user_email, expired_at, is_activated FROM confirmation_token WHERE token=?
      activate-token: >
        UPDATE confirmation_token
        SET is_activated = true
        WHERE token = ?;

    auth:
      role:
        find-role-id-by-role-name: >
          SELECT role_id FROM user_role WHERE role_name=?;
    cart:
      addToCart: >
        INSERT INTO cart_item(cart_item_id, quantity,timestamp_added,customer_id,product_id)
        VALUES (?,?,?,?,?);
      get-by-customer-product: >
        SELECT cart_item_id, quantity, timestamp_added, customer_id, product_id
        FROM cart_item
        WHERE customer_id = ? AND product_id = ? ;
      change-quantity-by-id: >
        UPDATE cart_item
        SET quantity = ?
        WHERE cart_item_id = ?;
      find-auth-customer-cart-items: >
        SELECT product_id, quantity
        FROM cart_item
        WHERE customer_id = ?;

    category:
      find-by-id: >
        SELECT product_category_name
        FROM product_category
        WHERE category_id = ?;
      find-category-name-by-product-id: >
        SELECT product_category_name
        FROM product INNER JOIN product_category USING(category_id)
        WHERE product_id = ?;
